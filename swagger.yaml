# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  version: "1"
  title: OSU People/Directory API

# Describe your paths here

paths:

  /people:
    # This is a HTTP operation
    get:
      tags:
       - people
      # Describe this verb here. Note: you can use markdown
      description: "Gets all `person` objects. Can be filtered by parameters."
      operationId: getPeople
      # This is array of GET operation parameters:
      produces:
        - application/json
      parameters:
        - name: firstName
          in: query
          description: "The first name of the person"
          required: false
          type: string

        - name: lastName
          in: query
          description: "The last name of the person"
          required: false
          type: string

        - name: email
          in: query
          description: "The email address of the person"
          required: false
          type: string
          format: email

        - name: eppn
          in: query
          description: "The person's email, specifically [onidusername@oregonstate.edu]"
          required: false
          type: string
          format: email

        - name: upn
          in: query
          description: "Same as EPPN in the long term..."
          required: false
          type: string
          format: email

        - name: EPPNPrior
          in: body
          description: "Any prior email addresses the user may have"
          required: false
          schema:
            $ref: "#/definitions/EPPNPriorArray"

      # Expected responses for this operation:
      responses:
        # Response code
        "200":
          description: "Successful response"
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: "#/definitions/Person"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      security:
        - people_api_key: []

  /people/{eppn}:
    get:
      tags:
        - people
      description: "Finds Person by eppn"
      operationId: getPersonByEppn
      produces:
        - application/json
      parameters:
        - name: eppn
          in: path
          description: "EPPN of person to be fetched"
          required: true
          type: string
          format: email

      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/Person"
        "404":
          description: "Resource not found"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Error"
      security:
        - people_api_key: []

  /directory:
    get:
      tags:
        - directory
      operationId: getDirectoryEntries
      description: "Get all entities in directory. Can be filtered by query parameters"
      produces:
        - application/json
      parameters:
        - name: Full Name
          in: query
          description: "Full name of person to be searched for."
          required: false
          type: string

        - name: Surname
          in: query
          description: "Surname of person to be searched for."
          required: false
          type: string

        - name: Email Address
          in: query
          description: "Email address of person to be searched for."
          required: false
          type: string
          format: email

        - name: Office Phone
          in: query
          description: "Office phone number of person to be searched for."
          required: false
          type: string

        - name: Alternate Phone
          in: query
          description: "Alternate phone number of person to be searched for."
          required: false
          type: string

        - name: Home Phone
          in: query
          description: "Home phone number of person to be searched for."
          required: false
          type: string

        - name: Fax Number
          in: query
          description: "Fax number of person to be searched for."
          required: false
          type: string

        - name: Office Address
          in: query
          description: "Office address of person to be searched for."
          required: false
          type: string

        - name: Department
          in: query
          description: "Department of person to be searched for."
          required: false
          type: string

        - name: Affiliation
          in: query
          description: "Any, Employee, Student, Other are valid options to be searched with."
          required: false
          type: string

        - name: Any Phone Number
          in: query
          description: "Any phone number to be searched with"
          required: false
          type: string

        - name: Join Search Parameters With And or Or
          in: query
          description: "and & or are valid options. And is default value"
          required: false
          type: string

      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/directoryEntity"
        "400":
          description: "Bad Request"
          #example: "Error: Too many entries returned. Try a more precise search."
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal server error"
      security:
        - directory_api_key: []

  /directory/{osuuid}:
    get:
      tags:
      - directory
      operationId: getDirectoryEntryByOsuuid
      parameters:
        - name: osuuid
          in: path
          description: "OSUUID of the person to be fetched."
          type: integer
          required: true
      responses:
        "200":
          description: "Succesful response"
          schema:
           $ref: "#/definitions/directoryEntity"
        "404":
          description: "Resource not found"
        "500":
          description: "Internal server error"
      security:
        - directory_api_key: []

securityDefinitions:
  people_api_key:
    type: apiKey
    name: people_api_key
    in: query
  directory_api_key:
    type: apiKey
    name: directory_api_key
    in: query

definitions:

  Person:
    required:
      - firstName
      - lastName
      - username
      - email
      - eppn
      - upn

    properties:
      firstName:
        type: string
      lastName:
        type: string
      osuID:
        type: string
      username:
        type: string
      email:
        $ref: "#/definitions/Email"
      eppn:
        $ref: "#/definitions/Email"
      upn:
        $ref: "#/definitions/Email"
#     tags:
#       $ref: "#/definitions/Tags"
#     jobs:
#       $ref: "#/definitions/Jobs"

# Tags:
#   type: array
#   items:
#     $ref: "#/definitions/Tag"

# Tag:
#   type: string

  EPPNPriorArray:
    type: array
    items:
      $ref: "#/definitions/Email"

  Email:
    type: string
    format: email

  directoryEntity:
    required:
      - fullName
      - primaryAffiliation
      - username
    properties:
      fullName:
        type: string
      primaryAffiliation:
        type: string
      title:
        type: string
      department:
        type: string
      departmentMailingAddress:
        type: string
      homePhoneNumber:
        type: string
      homeAddress:
        type: string
      officePhoneNumber:
        type: string
      officeAddress:
        type: string
      faxNumber:
        type: string
      emailAddress:
        $ref: "#/definitions/Email"
      username:
        type: string

# Job:
#   type: object
#   properties:
#     jobTitle:
#       type: string
#     department:
#       type: string

# Jobs:
#   title: ArrayOfJobs
#   type: array
#   items:
#     $ref: "#/definitions/Job"

  Error:
    type: object
    properties:
      status:
        type: integer
        format: int32
      developerMessage:
        type: string
      userMesage:
        type: string
      code:
        type: integer
      details:
        type: string
